Linguagem Ubíqua
  -> Linguagem única
  -> Programador e cliente falando a mesma linguagem
  -> Sempre que possível, programar em ingles
  -> Não trabalhar com portugles (ClienteRepository?)
  -> Trazer para o domínio a linguagem do cliente (entidade Bananada)


Domínios Ricos vs Domínios Anemicos
  -> Domínios Anemicos
    -> Domínio anemico não possui regra de negócio na entidade (entidade simples)
    -> Data Driven Design
    -> Reflete o que está no seu banco
    -> Store procedures
    -> Não é possível testar store procedures
  -> Domínios Ricos
    -> Regras de negócio das entidades na aplicação
    -> Regras de negócio usando POO
    -> Melhor dos lados
    -> Realizar testes

dotnet new mstest => Cria solução para testes
dotnet sln add PaymentContext.Domain/PaymentContext.Domain.csproj
dotnet sln add PaymentContext.Shared/PaymentContext.Shared.csproj
dotnet sln add PaymentContext.Tests/PaymentContext.Tests.csproj
dotnet restore
dotnet build => Compila os projetos como um todo

PaymentContext.Domain -> Domínio rico da aplicação
PaymentContext.Shared -> Items que possam ser compartilhados
PaymentContext.Tests -> Testes

dotnet add reference ../PaymentContext.Domain/PaymentContext.Domain.csproj -> Adicionar no projeto Test
dotnet add reference ../PaymentContext.Shared/PaymentContext.Shared.csproj -> Adicionar no projeto Test e Domain

ValueObjects:
  Tipos que compõem uma entidade
  => A ideia é que se utilize menos tipos primitivos para começar a utilizar tipos complexos para alguns campos que se repetem entre entidades, a fim de facilitar os testes e validações